version: '3.8'

# ===============================================
# 八卦运势小程序 - 2025年生产环境Docker配置
# 支持前后端分离、监控告警、自动备份
# 版本: v2.0.0
# 创建时间: 2025-06-17
# ===============================================

services:
  # MySQL数据库 - 生产环境优化版
  mysql-prod:
    image: mysql:8.0.35
    container_name: fortune-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-fortune_db}
      MYSQL_USER: ${MYSQL_USERNAME:-fortune_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
      TZ: Asia/Shanghai
    ports:
      - "127.0.0.1:3306:3306"  # 仅内网访问
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./backend/complete-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./logs/mysql:/var/log/mysql
      - ./backup/mysql:/backup
    command: |
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=1536M
      --innodb-log-file-size=256M
      --innodb-flush-log-at-trx-commit=1
      --sync-binlog=1
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
      --max-connections=1000
      --max-allowed-packet=64M
      --innodb-file-per-table=1
      --innodb-open-files=400
      --table-open-cache=256
      --log-bin=mysql-bin
      --expire-logs-days=7
    networks:
      - fortune-network
    security_opt:
      - seccomp:unconfined
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 60s
    labels:
      - "com.fortune.service=database"
      - "com.fortune.environment=production"

  # Redis缓存 - 生产环境优化版
  redis-prod:
    image: redis:7.2-alpine
    container_name: fortune-redis-prod
    restart: unless-stopped
    command: |
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1024mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --databases 16
      --hz 10
    ports:
      - "127.0.0.1:6379:6379"  # 仅内网访问
    volumes:
      - redis_prod_data:/data
      - ./logs/redis:/var/log/redis
      - ./backup/redis:/backup
    environment:
      TZ: Asia/Shanghai
    networks:
      - fortune-network
    security_opt:
      - seccomp:unconfined
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      timeout: 20s
      retries: 5
      interval: 30s
    labels:
      - "com.fortune.service=cache"
      - "com.fortune.environment=production"

  # 后端应用 - 生产环境优化版
  backend-prod:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - JAVA_VERSION=17
    image: fortune-backend:${APP_VERSION:-1.0.0}
    container_name: fortune-backend-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"  # 仅内网访问
      - "127.0.0.1:8081:8081"  # 管理端点
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - TZ=Asia/Shanghai
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
      # 数据库配置
      - MYSQL_HOST=mysql-prod
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${MYSQL_DATABASE:-fortune_db}
      - MYSQL_USERNAME=${MYSQL_USERNAME:-fortune_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      # Redis配置
      - REDIS_HOST=redis-prod
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE:-0}
      # 应用配置
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-}
      # AI服务配置
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DEEPSEEK_API_URL=${DEEPSEEK_API_URL:-https://api.deepseek.com/v1/chat/completions}
      - DEEPSEEK_MODEL=${DEEPSEEK_MODEL:-deepseek-chat}
      # 微信配置
      - WECHAT_APP_ID=${WECHAT_APP_ID}
      - WECHAT_APP_SECRET=${WECHAT_APP_SECRET}
      # 微信支付配置
      - WECHAT_PAY_APP_ID=${WECHAT_PAY_APP_ID:-}
      - WECHAT_PAY_MCH_ID=${WECHAT_PAY_MCH_ID:-}
      - WECHAT_PAY_API_KEY=${WECHAT_PAY_API_KEY:-}
      - WECHAT_PAY_NOTIFY_URL=${WECHAT_PAY_NOTIFY_URL:-}
      # JVM优化参数
      - JAVA_OPTS=-Xms1536m -Xmx3072m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:/app/logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=100M -Dfile.encoding=UTF-8 -Duser.timezone=Asia/Shanghai
    depends_on:
      mysql-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./ssl:/app/ssl:ro
      - ./backup/app:/app/backup
    networks:
      - fortune-network
    security_opt:
      - seccomp:unconfined
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/api/actuator/health || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 5m
    labels:
      - "com.fortune.service=backend"
      - "com.fortune.environment=production"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Nginx反向代理 - 生产环境优化版
  nginx-prod:
    image: nginx:1.25-alpine
    container_name: fortune-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./frontend/dist/build/h5:/usr/share/nginx/html/static:ro
      - ./uploads:/usr/share/nginx/html/uploads:ro
      - ./monitoring/nginx:/etc/nginx/monitoring:ro
    environment:
      TZ: Asia/Shanghai
    depends_on:
      - backend-prod
    networks:
      - fortune-network
    security_opt:
      - seccomp:unconfined
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.fortune.service=proxy"
      - "com.fortune.environment=production"

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: fortune-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://${DOMAIN_NAME:-localhost}:9090'
    environment:
      TZ: Asia/Shanghai
    networks:
      - fortune-network
    labels:
      - "com.fortune.service=monitoring"
      - "com.fortune.environment=production"

  # Grafana可视化
  grafana:
    image: grafana/grafana:10.2.0
    container_name: fortune-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SERVER_DOMAIN=${DOMAIN_NAME:-localhost}
      - GF_SERVER_ROOT_URL=http://${DOMAIN_NAME:-localhost}:3000
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - TZ=Asia/Shanghai
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fortune-network
    labels:
      - "com.fortune.service=visualization"
      - "com.fortune.environment=production"

  # Node Exporter - 系统监控
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: fortune-node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    environment:
      TZ: Asia/Shanghai
    networks:
      - fortune-network
    labels:
      - "com.fortune.service=system-monitoring"
      - "com.fortune.environment=production"

  # MySQL Exporter - 数据库监控
  mysql-exporter:
    image: prom/mysqld-exporter:v0.15.0
    container_name: fortune-mysql-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9104:9104"
    environment:
      - DATA_SOURCE_NAME=root:${MYSQL_ROOT_PASSWORD}@(mysql-prod:3306)/
      - TZ=Asia/Shanghai
    depends_on:
      - mysql-prod
    networks:
      - fortune-network
    labels:
      - "com.fortune.service=database-monitoring"
      - "com.fortune.environment=production"

  # Redis Exporter - 缓存监控
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: fortune-redis-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-prod:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - TZ=Asia/Shanghai
    depends_on:
      - redis-prod
    networks:
      - fortune-network
    labels:
      - "com.fortune.service=cache-monitoring"
      - "com.fortune.environment=production"

  # 日志收集 - Filebeat
  filebeat:
    image: elastic/filebeat:8.11.0
    container_name: fortune-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=Asia/Shanghai
    networks:
      - fortune-network
    labels:
      - "com.fortune.service=log-collection"
      - "com.fortune.environment=production"
    depends_on:
      - backend-prod
      - nginx-prod

  # 数据备份服务
  backup:
    image: alpine:3.18
    container_name: fortune-backup
    restart: unless-stopped
    volumes:
      - mysql_prod_data:/var/lib/mysql:ro
      - redis_prod_data:/var/lib/redis:ro
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - TZ=Asia/Shanghai
    command: |
      sh -c "
      apk add --no-cache mysql-client redis dcron &&
      echo '0 2 * * * /backup.sh' | crontab - &&
      crond -f
      "
    networks:
      - fortune-network
    labels:
      - "com.fortune.service=backup"
      - "com.fortune.environment=production"
    depends_on:
      - mysql-prod
      - redis-prod

# Docker卷定义
volumes:
  mysql_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fortune-app/data/mysql
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fortune-app/data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fortune-app/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fortune-app/data/grafana

# 网络配置
networks:
  fortune-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: fortune-br0
      com.docker.network.driver.mtu: 1500 