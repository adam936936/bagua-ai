user nginx;
worker_processes auto;
pid /var/run/nginx.pid;
error_log /var/log/nginx/error.log warn;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 基本配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    client_body_buffer_size 10M;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 16k;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 安全头
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # 限制请求
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # 后端服务集群
    upstream backend_cluster {
        server backend-prod:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # 管理端点（仅内网访问）
    upstream management_cluster {
        server backend-prod:8081 max_fails=2 fail_timeout=20s;
        keepalive 8;
    }

    # HTTP -> HTTPS 重定向
    server {
        listen 80;
        server_name _;
        
        # 健康检查端点（HTTP允许）
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 其他请求重定向到HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS主服务器
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL配置
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1h;

        # 安全头
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 前端静态资源缓存优化
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            root /usr/share/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
            gzip_static on;
            access_log off;
        }

        # HTML文件不缓存（确保更新及时）
        location ~* \.html$ {
            root /usr/share/nginx/html;
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # 前端API代理到后端
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend_cluster;  # 注意这里去掉了/api/，因为后端context-path已经是/api
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # 超时配置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # 错误页面
            proxy_intercept_errors on;
            error_page 502 503 504 /50x.html;
        }

        # 登录接口特殊限流
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://backend_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 管理端点（仅内网访问）
        location /management/ {
            # 限制访问IP（根据实际情况修改）
            allow 172.20.0.0/16;
            allow 127.0.0.1;
            deny all;
            
            proxy_pass http://management_cluster/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 文件上传
        location /uploads/ {
            alias /app/uploads/;
            expires 1d;
            add_header Cache-Control "public";
        }

        # 前端SPA路由支持（最重要的配置）
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            
            # SPA路由支持：所有未匹配的请求都返回index.html
            try_files $uri $uri/ @fallback;
            
            # 安全配置
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
        }
        
        # SPA路由回退
        location @fallback {
            root /usr/share/nginx/html;
            try_files /index.html =404;
        }

        # 错误页面
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # 监控端点
        location = /nginx_status {
            stub_status on;
            allow 172.20.0.0/16;
            allow 127.0.0.1;
            deny all;
        }
    }
} 